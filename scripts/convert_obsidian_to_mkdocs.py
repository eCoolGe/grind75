import shutil
import yaml
import logging
import re
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='[%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
ROOT = Path(__file__).resolve().parent.parent
README = ROOT / 'README.md'
OBSIDIAN = ROOT / 'obsidian'
DOCS = ROOT / 'docs'
SELECTED_DIRS = ['problems']


def inject_info_block(path: Path, meta: dict):
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ [!INFO] –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ python-–±–ª–æ–∫–∞ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ üá∫üá∏ –£—Å–ª–æ–≤–∏–µ.
    """
    try:
        content = path.read_text(encoding='utf-8')
        parts = content.split('---', 2)
        if len(parts) < 3:
            return
        frontmatter = parts[0] + '---' + parts[1] + '---'
        body = parts[2]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ üá∫üá∏
        condition_index = body.find('## üá∫üá∏ –£—Å–ª–æ–≤–∏–µ')
        if condition_index == -1:
            logger.debug(f"{path.relative_to(ROOT)}: –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ üá∫üá∏ –£—Å–ª–æ–≤–∏–µ")
            return

        before = body[:condition_index]
        after = body[condition_index:]

        # –ù–∞–π—Ç–∏ –≤—Å–µ python-–±–ª–æ–∫–∏
        matches = list(re.finditer(r"```python\n.*?\n```", before, re.DOTALL))
        if not matches:
            logger.debug(f"{path.relative_to(ROOT)}: –Ω–µ—Ç –±–ª–æ–∫–æ–≤ ```python")
            return

        last_code_block = matches[-1]
        insert_pos = last_code_block.end()

        title_rus = meta.get("title_rus", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        leetcode_url = meta.get("leetcode_url", "")
        time = meta.get("time", "")
        space = meta.get("space", "")

        leetcode_md = f"[{leetcode_url.split('/')[-2]}]({leetcode_url})" if leetcode_url else "‚Äî"

        info_block = "\n\n> [!INFO]  \n"
        info_block += f"> **üá∑üá∫ –ù–∞–∑–≤–∞–Ω–∏–µ:** {title_rus}  \n"
        info_block += f"> **LeetCode:** {leetcode_md}  \n"
        info_block += f"> **–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:** {time or '?'}  \n"
        info_block += f"> **–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:** {space or '?'}  \n\n"

        body = before[:insert_pos] + info_block + before[insert_pos:] + after
        new_text = f"{frontmatter}\n{body.lstrip()}"
        path.write_text(new_text, encoding='utf-8')
        logger.info(f"[INFO] –±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤: {path.relative_to(ROOT)}")
    except Exception as e:
        logger.error(f"{path.relative_to(ROOT)}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–ª–æ–∫–∞ INFO: {e}")


def copy_readme_to_index():
    """–ö–æ–ø–∏—Ä—É–µ—Ç README.md –≤ docs/index.md"""
    DOCS.mkdir(exist_ok=True)
    target = DOCS / 'index.md'
    if README.exists():
        shutil.copyfile(README, target)
        logger.info(f"README.md —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {target}")
    else:
        logger.warning("README.md –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")


def copy_selected_dirs():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –∏–∑ Obsidian –≤ docs"""
    for name in SELECTED_DIRS:
        src = OBSIDIAN / name
        dst = DOCS / name
        if not src.exists():
            logger.warning(f"–ü–∞–ø–∫–∞ {src} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            continue
        if dst.exists():
            shutil.rmtree(dst)
            logger.info(f"–°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {dst}")
        shutil.copytree(src, dst)
        logger.info(f"{src} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dst}")


def convert_metadata_to_tags(path: Path):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç YAML frontmatter –≤ .md —Ñ–∞–π–ª–µ:
    –¥–æ–±–∞–≤–ª—è–µ—Ç difficulty –∏ topics –∫ tags.
    –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å—Ç–∞–≤–∫—É [!INFO] –±–ª–æ–∫–∞.
    """
    try:
        text = path.read_text(encoding='utf-8')
        if not text.startswith('---'):
            logger.debug(f"{path.relative_to(ROOT)}: –Ω–µ—Ç frontmatter")
            return

        parts = text.split('---', 2)
        if len(parts) < 3:
            logger.warning(f"{path.relative_to(ROOT)}: –æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ frontmatter")
            return

        header_raw, content = parts[1], parts[2].lstrip()
        meta = yaml.safe_load(header_raw)

        tags = meta.get('tags', [])
        if not isinstance(tags, list):
            tags = [tags]

        for key in ('difficulty', 'topics'):
            value = meta.get(key)
            if isinstance(value, str):
                tags.append(value)
            elif isinstance(value, list):
                tags.extend(value)

        meta['tags'] = sorted(set(tags))
        new_header = yaml.safe_dump(meta, sort_keys=False, allow_unicode=True).strip()
        new_text = f"---\n{new_header}\n---\n\n{content}"
        path.write_text(new_text, encoding='utf-8')
        logger.info(f"–û–±–Ω–æ–≤–ª—ë–Ω frontmatter: {path.relative_to(ROOT)}")

        inject_info_block(path, meta)

    except Exception as e:
        logger.error(f"{path.relative_to(ROOT)}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


def process_markdown_files():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã –≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
    for subdir in SELECTED_DIRS:
        for path in (DOCS / subdir).rglob("*.md"):
            convert_metadata_to_tags(path)


def main():
    logger.info("=== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ===")
    copy_readme_to_index()
    copy_selected_dirs()
    process_markdown_files()
    logger.info("=== –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===")


if __name__ == "__main__":
    main()
