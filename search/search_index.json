{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hello!","text":""},{"location":"tags/","title":"\u0422\u0435\u0433\u0438","text":""},{"location":"tags/#tag:problem","title":"problem","text":"<ul> <li>            3Sum          </li> <li>            Add Binary          </li> <li>            Balanced Binary Tree          </li> <li>            Best Time to Buy and Sell Stock          </li> <li>            Binary Search          </li> <li>            Climbing Stairs          </li> <li>            Coin Change          </li> <li>            Contains Duplicate          </li> <li>            Diameter of Binary Tree          </li> <li>            First Bad Version          </li> <li>            Flood Fill          </li> <li>            Implement Queue using Stacks          </li> <li>            Insert Interval          </li> <li>            Invert Binary Tree          </li> <li>            Linked List Cycle          </li> <li>            Longest Palindrome          </li> <li>            Longest Subarray of 1's After Deleting One Element          </li> <li>            Longest Substring Without Repeating Characters          </li> <li>            Lowest Common Ancestor of a Binary Search Tree          </li> <li>            Majority Element          </li> <li>            Max Consecutive Ones          </li> <li>            Maximum Depth of Binary Tree          </li> <li>            Maximum Subarray          </li> <li>            Merge Two Sorted Lists          </li> <li>            Middle of the Linked List          </li> <li>            Number of Islands          </li> <li>            Ransom Note          </li> <li>            Reverse Linked List          </li> <li>            Two Sum          </li> <li>            Valid Anagram          </li> <li>            Valid Palindrome          </li> <li>            Valid Parentheses          </li> <li>            Validate Binary Search Tree          </li> </ul>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/","title":"\u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (Obsidian Vault)","text":""},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#_1","title":"\u0412\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438","text":"<pre><code>TABLE title_rus AS \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", difficulty AS \"\u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c\", time AS \"\u0412\u0440\u0435\u043c\u044f\", space AS \"\u041f\u0430\u043c\u044f\u0442\u044c\"\nFROM \"problems\"\nSORT file.name ASC \n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#_2","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":""},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#easy","title":"<code>Easy</code> \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>TABLE title_rus AS \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", time AS \"\u0412\u0440\u0435\u043c\u044f\", space AS \"\u041f\u0430\u043c\u044f\u0442\u044c\"\nFROM \"problems\"\nWHERE difficulty = \"Easy\"\nSORT file.name ASC \n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#medium","title":"<code>Medium</code> \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>TABLE title_rus AS \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", time AS \"\u0412\u0440\u0435\u043c\u044f\", space AS \"\u041f\u0430\u043c\u044f\u0442\u044c\"\nFROM \"problems\"\nWHERE difficulty = \"Medium\"\nSORT file.name ASC \n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#hard","title":"<code>Hard</code> \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c","text":"<pre><code>TABLE title_rus AS \"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", time AS \"\u0412\u0440\u0435\u043c\u044f\", space AS \"\u041f\u0430\u043c\u044f\u0442\u044c\"\nFROM \"problems\"\nWHERE difficulty = \"Hard\"\nSORT file.name ASC \n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#_3","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c","text":"<pre><code>TABLE rows.file.link AS \"\ud83c\uddfa\ud83c\uddf8    \u0423\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\", rows.title_rus AS \"\ud83c\uddf7\ud83c\uddfa    \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\"\nFROM \"problems\"\nFLATTEN topics AS topic \nGROUP BY topic AS \"\\#\"\n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#grind75","title":"\u0417\u0430\u0434\u0430\u0447\u0438 \u043d\u0435 \u0438\u0437 <code>Grind75</code>","text":"<pre><code>TABLE title_rus, difficulty, time, space\nFROM \"problems\"\nWHERE grind75 = False\nSORT file.name ASC\n</code></pre>"},{"location":"obsidian/%D0%9E%D0%B3%D0%BB%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%20%28Obsidian%20Vault%29/#_4","title":"\u041b\u0435\u0433\u0435\u043d\u0434\u0430","text":"<ul> <li><code>tags:</code> - \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u044d\u0442\u043e (<code>#problem</code> - \u0437\u0430\u0434\u0430\u0447\u0430, <code>#template</code> - \u0448\u0430\u0431\u043b\u043e\u043d)</li> <li><code>#\u0442\u0435\u0433\u0438-\u0432-\u043a\u043e\u043d\u0446\u0435-\u0444\u0430\u0439\u043b\u0430</code> - \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u0437\u0430\u0434\u0430\u0447, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440</li> <li>\u0447\u0435\u043a\u0431\u043e\u043a\u0441 <code>grind75</code> - \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u0445\u043e\u0434\u0438\u0442 \u0432 \u043b\u0438\u0441\u0442 Grind75</li> </ul>"},{"location":"obsidian/problems/3Sum/","title":"3Sum","text":"","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def threeSum(self, nums: List[int]) -&gt; List[List[int]]:  \n        result = []  \n        nums.sort()  \n\n        for i in range(len(nums)):  \n            if i &gt; 0 and nums[i] == nums[i - 1]:  \n                continue  \n\n            left = i + 1  \n            right = len(nums) - 1  \n\n            while left &lt; right:  \n                target = nums[i] + nums[left] + nums[right]  \n\n                if target &gt; 0:  \n                    right -= 1  \n                elif target &lt; 0:  \n                    left += 1  \n                else:  \n                    result.append([nums[i], nums[left], nums[right]])  \n                    left += 1  \n\n                    while nums[left] == nums[left - 1] and left &lt; right:  \n                        left += 1  \n\n        return result\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an integer array nums, return all the triplets\u00a0<code>[nums[i], nums[j], nums[k]]</code>\u00a0such that\u00a0<code>i != j</code>,\u00a0<code>i != k</code>, and\u00a0<code>j != k</code>, and\u00a0<code>nums[i] + nums[j] + nums[k] == 0</code>.</p> <p>Notice that the solution set must not contain duplicate triplets.</p>","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [-1,0,1,2,-1,-4] Output: [ [-1,-1,2],[-1,0,1] ] Explanation:  nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter.  </p> <p>Example 2:</p> <p>Input: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0.  </p> <p>Example 3:</p> <p>Input: nums = [0,0,0] Output: [ [0,0,0] ] Explanation: The only possible triplet sums up to 0.  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [-1,0,1,2,-1,-4]\n      },\n      \"output\": [\n        [-1,-1,2],\n        [-1,0,1]\n      ]\n    },\n    {\n      \"input\": {\n        \"nums\": [0,1,1]\n      },\n      \"output\": []\n    },\n    {\n      \"input\": {\n        \"nums\": [0,0,0]\n      },\n      \"output\": [\n        [0,0,0]\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(3 \\leq nums.length \\leq 3000\\)</li> <li>\\(-10^5 \\leq nums[i] \\leq 10^5\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/3Sum/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/3Sum/#time-complexity-on2","title":"\u23f1 Time complexity: <code>O(n\u00b2)</code>","text":"<ul> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430: <code>O(n log n)</code></li> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0446\u0438\u043a\u043b \u043f\u043e <code>i</code>: <code>O(n)</code></li> <li>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0446\u0438\u043a\u043b \u0441 \u0434\u0432\u0443\u043c\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c\u0438 (<code>j</code>, <code>k</code>) \u2014 \u0432 \u0441\u0443\u043c\u043c\u0435 \u043f\u043e \u0432\u0441\u0435\u043c <code>i</code>: <code>O(n)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n\u00b2)</code></p>","tags":["problem"]},{"location":"obsidian/problems/3Sum/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b</li> <li>\u0425\u0440\u0430\u043d\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442</li> <li>\u041f\u043e \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0443 \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432, <code>res</code> \u043d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f (\u0430\u043d\u0430\u043b\u0438\u0437 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0430\u043c\u044f\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0432\u0435\u0440\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0438 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445)</li> <li>\u0415\u0441\u043b\u0438 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u2014 \u043f\u0430\u043c\u044f\u0442\u044c \u0431\u0443\u0434\u0435\u0442 <code>O(k)</code>, \u0433\u0434\u0435 <code>k</code> \u2014 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0445 \u0442\u0440\u043e\u0435\u043a (\u0432 \u0445\u0443\u0434\u0448\u0435\u043c <code>O(n\u00b2)</code>)</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>medium array two-pointers sorting</p>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/","title":"Add Binary","text":"","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def addBinary(self, a: str, b: str) -&gt; str:  \n        return bin(int(a, 2) + int(b, 2))[2:]\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given two binary strings\u00a0<code>a</code>\u00a0and\u00a0<code>b</code>, return\u00a0their sum as a binary string.</p>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: a = \"11\", b = \"1\" Output: \"100\"  </p> <p>Example 2:</p> <p>Input: a = \"1010\", b = \"1011\" Output: \"10101\"  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"a\": \"11\",\n        \"b\": \"1\"\n      },\n      \"output\": \"100\"\n    },\n    {\n      \"input\": {\n        \"a\": \"1010\",\n        \"b\": \"1011\"\n      },\n      \"output\": \"10101\"\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq a.length, b.length \\leq 10^4\\)</li> <li><code>a</code>\u00a0and\u00a0<code>b</code>\u00a0consist\u00a0only of\u00a0<code>'0'</code>\u00a0or\u00a0<code>'1'</code>\u00a0characters.</li> <li>Each string does not contain leading zeros except for the zero itself.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li><code>int(a, 2)</code> \u0438 <code>int(b, 2)</code> \u2014 O(n), \u0433\u0434\u0435 <code>n</code> \u2014 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.</li> <li>\u0421\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u2014 O(n), \u0442\u0430\u043a \u043a\u0430\u043a Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443.</li> <li><code>bin(...)[2:]</code> \u2014 O(n) \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code>, \u0433\u0434\u0435 <code>n = max(len(a), len(b))</code></p>","tags":["problem"]},{"location":"obsidian/problems/Add%20Binary/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0430\u043c\u044f\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 \u0438 \u0441\u0442\u0440\u043e\u043a\u0438:<ul> <li>\u0434\u0432\u0430 <code>int</code>,</li> <li>\u043e\u0434\u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.</li> </ul> </li> <li>\u0412\u0441\u0435 \u2014 \u043b\u0438\u043d\u0435\u0439\u043d\u043e \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u0432\u0445\u043e\u0434\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>easy math string bit-manipulation simulation</p>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/","title":"Balanced Binary Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, val=0, left=None, right=None):  \n#         self.val = val  \n#         self.left = left  \n#         self.right = right  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def isBalanced(self, root: Optional[TreeNode]) -&gt; bool:  \n        return self.height(root) &gt;= 0  \n\n    def height(self, root):  \n        if root is None:  \n            return 0  \n        left, right = self.height(root.left), self.height(root.right)  \n        if left &lt; 0 or right &lt; 0 or abs(left - right) &gt; 1:  \n            return -1  \n        return max(left, right) + 1\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a binary tree, determine if it is\u00a0height-balanced.</p>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg](https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg)   <p>Input: root = [3,9,20,null,null,15,7] Output: true  </p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg](https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg)   <p>Input: root = [1,2,2,3,3,null,null,4,4] Output: false  </p> <p>Example 3:</p> <p>Input: root = [] Output: true  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [3,9,20,null,null,15,7]\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"root\": [1,2,2,3,3,null,null,4,4]\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": true\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0<code>[0, 5000]</code>.</li> <li>\\(-10^4 \\leq Node.val \\leq 10^4\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u044b\u0441\u043e\u0442\u0430 \u043b\u0435\u0432\u043e\u0433\u043e \u0438 \u043f\u0440\u0430\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432.</li> <li>\u0415\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043e, \u043f\u0440\u0435\u043a\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0431\u0445\u043e\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c <code>-1</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Balanced%20Binary%20Tree/#space-complexity-oh","title":"\ud83e\udde0 Space complexity: <code>O(h)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 <code>h</code>, \u0433\u0434\u0435:<ul> <li><code>h = log n</code> \u0434\u043b\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430,</li> <li><code>h = n</code> \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043f\u0438\u0441\u043e\u043a).</li> </ul> </li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code></p> <p>easy tree depth-first-search binary-tree</p>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/","title":"Best Time to Buy and Sell Stock","text":"","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List\n\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        buy_price = prices[0]\n        profit = 0\n\n        for price in prices[1:]:\n            if buy_price &gt; price:\n                buy_price = price\n\n            profit = max(profit, price - buy_price)\n\n        return profit\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are given an array\u00a0<code>prices</code>\u00a0where\u00a0<code>prices[i]</code>\u00a0is the price of a given stock on the\u00a0<code>ith</code>\u00a0day.</p> <p>You want to maximize your profit by choosing a\u00a0single day\u00a0to buy one stock and choosing a\u00a0different day in the future\u00a0to sell that stock.</p> <p>Return\u00a0the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return\u00a0<code>0</code>.</p>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.</p> <p>Example 2:</p> <p>Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"prices\": [7,1,5,3,6,4]\n      },\n      \"output\": 5\n    },\n    {\n      \"input\": {\n        \"prices\": [7,6,4,3,1]\n      },\n      \"output\": 0\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq prices.length \\leq 10^5\\)</li> <li>\\(0 \\leq prices[i] \\leq 10^4\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e <code>prices</code> \u0434\u043b\u0438\u043d\u044b <code>n</code></li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0438\u043a\u043b\u0430 \u2014 <code>O(1)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Best%20Time%20to%20Buy%20and%20Sell%20Stock/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e 2 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (<code>buy_price</code>, <code>profit</code>)</li> <li>\u041f\u0430\u043c\u044f\u0442\u044c \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy array dynamic-programming</p>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/","title":"Binary Search","text":"","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List\n\n\nclass Solution:  \n    def search(self, nums: List[int], target: int) -&gt; int:  \n        left = 0  \n        right = len(nums) - 1  \n\n        while left &lt;= right:  \n            middle = left + (right - left) // 2  \n\n            if target &gt; nums[middle]:  \n                left = middle + 1  \n            elif target &lt; nums[middle]:  \n                right = middle - 1  \n            else:  \n                return middle  \n        return -1\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an array of integers\u00a0<code>nums</code>\u00a0which is sorted in ascending order, and an integer\u00a0<code>target</code>, write a function to search\u00a0<code>target</code>\u00a0in\u00a0<code>nums</code>. If\u00a0<code>target</code>\u00a0exists, then return its index. Otherwise, return\u00a0<code>-1</code>.</p> <p>You must write an algorithm with\u00a0<code>O(log n)</code>\u00a0runtime complexity.</p>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4</p> <p>Example 2:</p> <p>Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2 does not exist in nums so return -1</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [-1,0,3,5,9,12],\n        \"target\": 9\n      },\n      \"output\": 4\n    },\n    {\n      \"input\": {\n        \"nums\": [-1,0,3,5,9,12],\n        \"target\": 2\n      },\n      \"output\": -1\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq nums.length \\leq 10^4\\)</li> <li>\\(-10^4 &lt; nums[i], target &lt; 10^4\\)</li> <li>All the integers in\u00a0<code>nums</code>\u00a0are\u00a0unique.</li> <li><code>nums</code>\u00a0is sorted in ascending order.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#time-complexity-olog-n","title":"\u23f1 Time complexity: <code>O(log n)</code>","text":"<ul> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043f\u043e\u0438\u0441\u043a\u0430 \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f \u0432 2 \u0440\u0430\u0437\u0430.</li> <li>\u0412\u0441\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c <code>log\u2082(n)</code> \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(log n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Binary%20Search/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e 3 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: <code>left</code>, <code>right</code>, <code>middle</code>.</li> <li>\u0411\u0435\u0437 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy array binary-search</p>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/","title":"Climbing Stairs","text":"","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def climbStairs(self, n: int) -&gt; int:  \n        if n &lt; 2:  \n            return n  \n\n        a, b = 1, 2  \n        for _ in range(3, n + 1):  \n            a, b = b, a + b  \n        return b\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are climbing a staircase. It takes\u00a0<code>n</code>\u00a0steps to reach the top.</p> <p>Each time you can either climb\u00a0<code>1</code>\u00a0or\u00a0<code>2</code>\u00a0steps. In how many distinct ways can you climb to the top?</p>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps</p> <p>Example 2:</p> <p>Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 2\n      },\n      \"output\": 2\n    },\n    {\n      \"input\": {\n        \"n\": 3\n      },\n      \"output\": 3\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq n \\leq 45\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041e\u0434\u0438\u043d \u0446\u0438\u043a\u043b \u043e\u0442 <code>3</code> \u0434\u043e <code>n</code> \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e.</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044f \u2014 <code>O(1)</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Climbing%20Stairs/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (<code>a</code>, <code>b</code>) \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy math dynamic-programming memoization</p>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/","title":"Coin Change","text":"","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def coinChange(self, coins: List[int], amount: int) -&gt; int:  \n        variants = [float(\"inf\")] * (amount + 1)  \n        variants[0] = 0  \n\n        for coin in coins:  \n            for x in range(coin, amount + 1):  \n                variants[x] = min(variants[x], variants[x - coin] + 1)  \n\n        return variants[amount] if variants[amount] != float('inf') else -1\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are given an integer array\u00a0<code>coins</code>\u00a0representing coins of different denominations and an integer\u00a0<code>amount</code>\u00a0representing a total amount of money.</p> <p>Return\u00a0the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return\u00a0<code>-1</code>.</p> <p>You may assume that you have an infinite number of each kind of coin.</p>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1  </p> <p>Example 2:</p> <p>Input: coins = [2], amount = 3 Output: -1  </p> <p>Example 3:</p> <p>Input: coins = [1], amount = 0 Output: 0  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"coins\": [1,2,5],\n        \"amount\": 11\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"coins\": [2],\n        \"amount\": 3\n      },\n      \"output\": -1\n    },\n    {\n      \"input\": {\n        \"coins\": [1],\n        \"amount\": 0\n      },\n      \"output\": 0\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq coins.length \\leq 12\\)</li> <li>\\(1 \\leq coins[i] \\leq 2^{31} - 1\\)</li> <li>\\(0 \\leq amount \\leq 10^4\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#time-complexity-onamount","title":"\u23f1 Time complexity: <code>O(n*amount)</code>","text":"<ul> <li>\u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0446\u0438\u043a\u043b \u043f\u043e <code>coins</code> \u0434\u043b\u0438\u043d\u044b <code>n</code></li> <li>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0439 \u0446\u0438\u043a\u043b \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c <code>x = coin .. amount</code> \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c <code>amount</code> \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f <code>min(...)</code> \u2014 O(1)</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n*amount)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Coin%20Change/#space-complexity-oamount","title":"\ud83e\udde0 Space complexity: <code>O(amount)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0441\u043f\u0438\u0441\u043e\u043a <code>variants</code> \u0434\u043b\u0438\u043d\u044b <code>amount + 1</code></li> <li>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(amount)</code></p> <p>medium array dynamic-programming breadth-first-search</p>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/","title":"Contains Duplicate","text":"","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:\n    def containsDuplicate(self, nums: List[int]) -&gt; bool:\n        return len(set(nums)) != len(nums)\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an integer array\u00a0<code>nums</code>, return\u00a0<code>true</code>\u00a0if any value appears\u00a0at least twice\u00a0in the array, and return\u00a0<code>false</code>\u00a0if every element is distinct.</p>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input:\u00a0nums = [1,2,3,1] Output:\u00a0true Explanation: The element 1 occurs at the indices 0 and 3.</p> <p>Example 2:</p> <p>Input:\u00a0nums = [1,2,3,4] Output:\u00a0false Explanation: All elements are distinct.</p> <p>Example 3:</p> <p>Input:\u00a0nums = [1,1,1,3,3,4,3,2,4,2] Output:\u00a0true  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [1,2,3,1]\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"nums\": [1,2,3,4]\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"nums\": [1,1,1,3,3,4,3,2,4,2]\n      },\n      \"output\": true\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq nums.length \\leq 10^5\\)</li> <li>\\(-10^9 \\leq nums[i] \\leq 10^9\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u2014 <code>O(n)</code> \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</li> <li>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u0438\u043d \u2014 <code>O(1)</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Contains%20Duplicate/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0445\u0440\u0430\u043d\u0438\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u2014 \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0437\u043d\u0430\u0447\u0438\u0442 \u043f\u0430\u043c\u044f\u0442\u044c <code>O(n)</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>easy array hash-table sorting</p>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/","title":"Diameter of Binary Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, val=0, left=None, right=None):  \n#         self.val = val  \n#         self.left = left  \n#         self.right = right  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -&gt; int:  \n        self.max_diameter = 0  \n\n        def height(node):  \n            if not node:  \n                return 0  \n            left = height(node.left)  \n            right = height(node.right)  \n            self.max_diameter = max(self.max_diameter, left + right)  \n            return max(left, right) + 1  \n\n        height(root)  \n        return self.max_diameter\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>root</code>\u00a0of a binary tree, return\u00a0the length of the\u00a0diameter\u00a0of the tree.</p> <p>The\u00a0diameter\u00a0of a binary tree is the\u00a0length\u00a0of the longest path between any two nodes in a tree. This path may or may not pass through the\u00a0<code>root</code>.</p> <p>The\u00a0length\u00a0of a path between two nodes is represented by the number of edges between them.</p>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg](https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg)   <p>Input: root = [1,2,3,4,5] Output: 3 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].  </p> <p>Example 2:</p> <p>Input: root = [1,2] Output: 1  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [1,2,3,4,5]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"root\": [1,2]\n      },\n      \"output\": 1\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0\\([1, 10^4]\\).</li> <li>\\(-100 \\leq Node.val \\leq 100\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u0437\u043b\u0443 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.  </li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0441\u043e\u0442, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430 \u0434\u0438\u0430\u043c\u0435\u0442\u0440\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Diameter%20of%20Binary%20Tree/#space-complexity-oh","title":"\ud83e\udde0 Space complexity: <code>O(h)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 <code>h</code> (\u0432\u044b\u0441\u043e\u0442\u0430 \u0434\u0435\u0440\u0435\u0432\u0430).  </li> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0432\u044b\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e) <code>h = n</code>, \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c <code>h = log n</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code></p> <p>easy tree depth-first-search binary-tree</p>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/","title":"First Bad Version","text":"","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># The isBadVersion API is already defined for you.  \n# def isBadVersion(version: int) -&gt; bool:  \n\n\nclass Solution:  \n    def firstBadVersion(self, n: int) -&gt; int:  \n        first, last = 1, n  \n\n        while first &lt; last:  \n            center = first + (last - first) // 2  \n\n            if not isBadVersion(center):  \n                first = center + 1  \n            else:  \n                last = center  \n\n        return first\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p> <p>Suppose you have\u00a0<code>n</code>\u00a0versions\u00a0<code>[1, 2, ..., n]</code>\u00a0and you want to find out the first bad one, which causes all the following ones to be bad.</p> <p>You are given an API\u00a0<code>bool isBadVersion(version)</code>\u00a0which returns whether\u00a0<code>version</code>\u00a0is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: n = 5, bad = 4 Output: 4 Explanation: call isBadVersion(3) -&gt; false call isBadVersion(5)\u00a0-&gt; true call isBadVersion(4)\u00a0-&gt; true Then 4 is the first bad version.  </p> <p>Example 2:</p> <p>Input: n = 1, bad = 1 Output: 1  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"n\": 5,\n        \"bad\": 4\n      },\n      \"output\": 4\n    },\n    {\n      \"input\": {\n        \"n\": 1,\n        \"bad\": 1\n      },\n      \"output\": 1\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq bad \\leq n \\leq 2^{31} - 1\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#time-complexity-olog-n","title":"\u23f1 Time complexity: <code>O(log n)</code>","text":"<ul> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u043e\u0442 1 \u0434\u043e n.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u0432\u0434\u0432\u043e\u0435.</li> <li>\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c <code>log\u2082(n)</code> \u0432\u044b\u0437\u043e\u0432\u043e\u0432 <code>isBadVersion</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(log n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/First%20Bad%20Version/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (<code>first</code>, <code>last</code>, <code>center</code>).</li> <li>\u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0435\u0439 \u043e\u0442 <code>n</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy binary-search interactive</p>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/","title":"Flood Fill","text":"","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -&gt; List[List[int]]:  \n        start_color = image[sr][sc]  \n\n        if start_color == color:  \n            return image  \n\n        stack = [(sr, sc)]  \n        rows, cols = len(image), len(image[0])  \n\n        while stack:  \n            r, c = stack.pop()  \n            if (0 &lt;= r &lt; rows) and (0 &lt;= c &lt; cols) and image[r][c] == start_color:  \n                image[r][c] = color  \n                stack.append((r + 1, c))  \n                stack.append((r - 1, c))  \n                stack.append((r, c + 1))  \n                stack.append((r, c - 1))  \n\n        return image\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are given an image represented by an\u00a0<code>m x n</code>\u00a0grid of integers\u00a0<code>image</code>, where\u00a0<code>image[i][j]</code>\u00a0represents the pixel value of the image. You are also given three integers\u00a0<code>sr</code>,\u00a0<code>sc</code>, and\u00a0<code>color</code>. Your task is to perform a\u00a0flood fill\u00a0on the image starting from the pixel\u00a0<code>image[sr][sc]</code>.</p> <p>To perform a\u00a0flood fill:</p> <ol> <li>Begin with the starting pixel and change its color to\u00a0<code>color</code>.</li> <li>Perform the same process for each pixel that is\u00a0directly adjacent\u00a0(pixels that share a side with the original pixel, either horizontally or vertically) and shares the\u00a0same color\u00a0as the starting pixel.</li> <li>Keep\u00a0repeating\u00a0this process by checking neighboring pixels of the\u00a0updated\u00a0pixels\u00a0and modifying their color if it matches the original color of the starting pixel.</li> <li>The process\u00a0stops\u00a0when there are\u00a0no more\u00a0adjacent pixels of the original color to update.</li> </ol> <p>Return the\u00a0modified\u00a0image after performing the flood fill.</p>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input:\u00a0image = [ [1,1,1],[1,1,0],[1,0,1] ], sr = 1, sc = 1, color = 2 Output:\u00a0[ [2,2,2],[2,2,0],[2,0,1] ] Explanation:</p>    ![https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg](https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg)   <p>From the center of the image with position\u00a0<code>(sr, sc) = (1, 1)</code>\u00a0(i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color. Note the bottom corner is\u00a0not\u00a0colored 2, because it is not horizontally or vertically connected to the starting pixel.  </p> <p>Example 2:</p> <p>Input:\u00a0image = [ [0,0,0],[0,0,0] ], sr = 0, sc = 0, color = 0 Output:\u00a0[ [0,0,0],[0,0,0] ] Explanation: The starting pixel is already colored with 0, which is the same as the target color. Therefore, no changes are made to the image.  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"image\": [\n          [1,1,1],\n          [1,1,0],\n          [1,0,1]\n        ],\n        \"sr\": 1,\n        \"sc\": 1,\n        \"color\": 2\n      },\n      \"output\": [\n        [2,2,2],\n        [2,2,0],\n        [2,0,1]\n      ]\n    },\n    {\n      \"input\": {\n        \"image\": [\n          [0,0,0],\n          [0,0,0]\n        ],\n        \"sr\": 0,\n        \"sc\": 0,\n        \"color\": 0\n      },\n      \"output\": [\n        [0,0,0],\n        [0,0,0]\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(m \\equiv image.length\\)</li> <li>\\(n \\equiv image[i].length\\)</li> <li>\\(1 \\leq m, n \\leq 50\\)</li> <li>\\(0 \\leq image[i][j], color &lt; 2^{16}\\)</li> <li>\\(0 \\leq sr &lt; m\\)</li> <li>\\(0 \\leq sc &lt; n\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#time-complexity-onm","title":"\u23f1 Time complexity: <code>O(n*m)</code>","text":"<ul> <li><code>n \u00d7 m</code> \u2014 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0432 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438.</li> <li>\u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0438\u043a\u0441\u0435\u043b\u044c \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435:<ul> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442 \u2014 <code>O(1)</code></li> <li>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430 \u2014 <code>O(1)</code></li> <li>\u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044c \u0446\u0432\u0435\u0442\u0430 \u2014 <code>O(1)</code></li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e 4 \u0441\u043e\u0441\u0435\u0434\u0435\u0439 \u0432 \u0441\u0442\u0435\u043a \u2014 \u0434\u043e 4 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430 \u043f\u0438\u043a\u0441\u0435\u043b\u044c</li> </ul> </li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n*m)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Flood%20Fill/#space-complexity-onm","title":"\ud83e\udde0 Space complexity: <code>O(n*m)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0442\u0435\u043a <code>stack</code>, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043f\u0430\u0441\u0442\u044c \u0432\u0441\u0435 \u043f\u0438\u043a\u0441\u0435\u043b\u0438 (\u0435\u0441\u043b\u0438 \u0432\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u2014 \u043e\u0434\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430).</li> <li>\u0414\u0440\u0443\u0433\u0438\u0445 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u043d\u0435\u0442.</li> <li>\u041d\u0435\u0442 \u0440\u0438\u0441\u043a\u0430 \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u0442\u0435\u043a\u0430, \u043a\u0430\u043a \u0432 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u043c DFS.</li> </ul> <p>\u0418\u0442\u043e\u0433: - \u0425\u0443\u0434\u0448\u0435\u0435: <code>O(n*m)</code> \u2014 \u0435\u0441\u043b\u0438 \u0432\u0441\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u0437\u0430\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f - \u0421\u0440\u0435\u0434\u043d\u0435\u0435/\u043b\u0443\u0447\u0448\u0435\u0435: \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u0432 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430</p> <p>easy array depth-first-search breadth-first-search matrix</p>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/","title":"Implement Queue using Stacks","text":"","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Your MyQueue object will be instantiated and called as such:  \n# obj = MyQueue()  \n# obj.push(x)  \n# param_2 = obj.pop()  \n# param_3 = obj.peek()  \n# param_4 = obj.empty()  \n\n\nclass MyQueue:  \n    def __init__(self):  \n        self.stack_in = []  \n        self.stack_out = []  \n\n    def push(self, x: int) -&gt; None:  \n        self.stack_in.append(x)  \n\n    def pop(self) -&gt; int:  \n        self._shift()  \n        return self.stack_out.pop()  \n\n    def peek(self) -&gt; int:  \n        self._shift()  \n        return self.stack_out[-1]  \n\n    def empty(self) -&gt; bool:  \n        return not self.stack_in and not self.stack_out  \n\n    def _shift(self):  \n        if not self.stack_out:  \n            while self.stack_in:  \n                self.stack_out.append(self.stack_in.pop())\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (<code>push</code>,\u00a0<code>peek</code>,\u00a0<code>pop</code>, and\u00a0<code>empty</code>).</p> <p>Implement the\u00a0<code>MyQueue</code>\u00a0class:</p> <ul> <li><code>void push(int x)</code>\u00a0Pushes element x to the back of the queue.</li> <li><code>int pop()</code>\u00a0Removes the element from the front of the queue and returns it.</li> <li><code>int peek()</code>\u00a0Returns the element at the front of the queue.</li> <li><code>boolean empty()</code>\u00a0Returns\u00a0<code>true</code>\u00a0if the queue is empty,\u00a0<code>false</code>\u00a0otherwise.</li> </ul> <p>Notes:</p> <ul> <li>You must use\u00a0only\u00a0standard operations of a stack, which means only\u00a0<code>push to top</code>,\u00a0<code>peek/pop from top</code>,\u00a0<code>size</code>, and\u00a0<code>is empty</code>\u00a0operations are valid.</li> <li>Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"] [ [], [1], [2], [], [], [] ] Output: [null, null, null, 1, 1, false]  </p> <p>Explanation: MyQueue myQueue = new MyQueue(); myQueue.push(1); // queue is: [1] myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myQueue.peek(); // return 1 myQueue.pop(); // return 1, queue is [2] myQueue.empty(); // return false  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"args\": [\n          [\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"],\n          [\n            [],\n            [1],\n            [2],\n            [],\n            [],\n            []\n          ]\n        ]\n      },\n      \"output\": [null,null,null,1,1,false]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq x \\leq 9\\)</li> <li>At most\u00a0<code>100</code>\u00a0calls will be made to\u00a0<code>push</code>,\u00a0<code>pop</code>,\u00a0<code>peek</code>, and\u00a0<code>empty</code>.</li> <li>All the calls to\u00a0<code>pop</code>\u00a0and\u00a0<code>peek</code>\u00a0are valid.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#time-complexity-o1","title":"\u23f1 Time complexity: <code>O(1)</code>","text":"\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435 <code>push(x)</code> <code>O(1)</code> \u043e\u0431\u044b\u0447\u043d\u044b\u0439 <code>append</code> \u0432 \u0441\u043f\u0438\u0441\u043e\u043a <code>pop()</code> <code>O(1)</code> \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0438\u0437 <code>in</code> \u0432 <code>out</code> \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e <code>O(n)</code> \u043d\u0430 <code>n</code> \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u2192 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c <code>O(1)</code> <code>peek()</code> <code>O(1)</code> \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0442\u0430 \u0436\u0435 \u043b\u043e\u0433\u0438\u043a\u0430, \u0447\u0442\u043e \u0438 \u0443 <code>pop()</code> <code>empty()</code> <code>O(1)</code> \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 - \u0414\u043e\u043f\u0443\u0441\u0442\u0438\u043c, \u043c\u044b \u0434\u0435\u043b\u0430\u0435\u043c <code>n</code> \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 <code>push</code>, \u0430 \u043f\u043e\u0442\u043e\u043c <code>n</code> \u0440\u0430\u0437 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c <code>pop</code>. - \u0422\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c <code>pop()</code> \u043c\u044b \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0438\u043c \u0432\u0441\u0435 <code>n</code> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 <code>stack_out</code>. - \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 <code>pop()</code> \u0438\u0434\u0443\u0442 \u0438\u0437 <code>stack_out</code>, \u0443\u0436\u0435 \u0431\u0435\u0437 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. - \u041f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u0442 <code>O(n)</code>, \u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043d\u0430 <code>n</code> \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c <code>1</code> \u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e. <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Implement%20Queue%20using%20Stacks/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u0412\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0434\u0432\u0443\u0445 \u0441\u043f\u0438\u0441\u043a\u0430\u0445, \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u2014 <code>n</code> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>easy stack design queue</p>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/","title":"Insert Interval","text":"","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\nclass Solution:  \n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -&gt; List[List[int]]:  \n        result = []  \n        i = 0\n        n = len(intervals)  \n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b, \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438 \u0438\u0434\u0443\u0449\u0438\u0435 \u0434\u043e newInterval  \n        while i &lt; n and intervals[i][1] &lt; newInterval[0]:  \n            result.append(intervals[i])  \n            i += 1  \n\n        # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b  \n        start, end = newInterval  \n        while i &lt; n and intervals[i][0] &lt;= end:  \n            start = min(start, intervals[i][0])  \n            end = max(end, intervals[i][1])  \n            i += 1  \n        result.append([start, end])  \n\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b  \n        while i &lt; n:  \n            result.append(intervals[i])  \n            i += 1  \n\n        return result\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are given an array of non-overlapping intervals\u00a0<code>intervals</code>\u00a0where\u00a0<code>intervals[i] = [starti, endi]</code>\u00a0represent the start and the end of the\u00a0<code>ith</code>\u00a0interval and\u00a0<code>intervals</code>\u00a0is sorted in ascending order by\u00a0<code>starti</code>. You are also given an interval\u00a0<code>newInterval = [start, end]</code>\u00a0that represents the start and end of another interval.</p> <p>Insert\u00a0<code>newInterval</code>\u00a0into\u00a0<code>intervals</code>\u00a0such that\u00a0<code>intervals</code>\u00a0is still sorted in ascending order by\u00a0<code>starti</code>\u00a0and\u00a0<code>intervals</code>\u00a0still does not have any overlapping intervals (merge overlapping intervals if necessary).</p> <p>Return\u00a0<code>intervals</code> after the insertion.</p> <p>Note\u00a0that you don't need to modify\u00a0<code>intervals</code>\u00a0in-place. You can make a new array and return it.</p>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: intervals = [ [1,3],[6,9] ], newInterval = [2,5] Output: [ [1,5],[6,9] ]  </p> <p>Example 2:</p> <p>Input: intervals = [ [1,2],[3,5],[6,7],[8,10],[12,16] ], newInterval = [4,8] Output: [ [1,2],[3,10],[12,16] ] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"intervals\": [\n          [1,3],\n          [6,9]\n        ],\n        \"newInterval\": [2,5]\n      },\n      \"output\": [\n        [1,5],\n        [6,9]\n      ]\n    },\n    {\n      \"input\": {\n        \"intervals\": [\n          [1,2],\n          [3,5],\n          [6,7],\n          [8,10],\n          [12,16]\n        ],\n        \"newInterval\": [4,8]\n      },\n      \"output\": [\n        [1,2],\n        [3,10],\n        [12,16]\n      ]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(0 \\leq intervals.length \\leq 10^4\\)</li> <li><code>intervals[i].length == 2</code></li> <li>\\(0 \\leq start_{i} \\leq end_{i} \\leq 10^5\\)</li> <li><code>intervals</code>\u00a0is sorted by\u00a0\\(start_{i}\\)\u00a0in\u00a0ascending\u00a0order.</li> <li><code>newInterval.length == 2</code></li> <li>\\(0 \\leq start \\leq end \\leq 10^5\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <code>n</code> \u2014 \u0434\u043b\u0438\u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 <code>intervals</code>.</li> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u043e\u0434\u043d\u0438\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u043e\u043c (\u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c <code>i</code> \u043e\u0442 0 \u0434\u043e <code>n</code>), \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0446\u0438\u043a\u043b\u043e\u0432 \u2014 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 (\u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442).</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Insert%20Interval/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a <code>result</code> \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.</li> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u043a\u043e\u0433\u0434\u0430 <code>newInterval</code> \u043d\u0435 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0438 \u0441 \u043a\u0430\u043a\u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c) <code>result</code> \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 <code>n+1</code> \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432 (\u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0439).</li> <li>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 (<code>start</code>, <code>end</code>, \u0441\u0447\u0435\u0442\u0447\u0438\u043a <code>i</code>) \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>medium array</p>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/","title":"Invert Binary Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, val=0, left=None, right=None):  \n#         self.val = val  \n#         self.left = left  \n#         self.right = right  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def invertTree(self, root: Optional[TreeNode]) -&gt; Optional[TreeNode]:  \n        def swipe(node):  \n            if not node:  \n                return None  \n            node.left, node.right = swipe(node.right), swipe(node.left)  \n            return node  \n\n        swipe(root)  \n        return root\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>root</code>\u00a0of a binary tree, invert the tree, and return\u00a0its root.</p>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)   <p>Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1]  </p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)   <p>Input: root = [2,1,3] Output: [2,3,1]  </p> <p>Example 3:</p> <p>Input: root = [] Output: []  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [4,2,7,1,3,6,9]\n      },\n      \"output\": [4,7,2,9,6,3,1]\n    },\n    {\n      \"input\": {\n        \"root\": [2,1,3]\n      },\n      \"output\": [2,3,1]\n    },\n    {\n      \"input\": {\n        \"root\": []\n      },\n      \"output\": []\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0<code>[0, 100]</code>.</li> <li>\\(-100 \\leq Node.val \\leq 100\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f:<ul> <li>\u043e\u0434\u0438\u043d \u0432\u044b\u0437\u043e\u0432 \u0434\u043b\u044f \u043b\u0435\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0430,</li> <li>\u043e\u0434\u0438\u043d \u0432\u044b\u0437\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u043e\u0433\u043e,</li> <li>\u043e\u0434\u043d\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043c\u0435\u043d\u0430 (<code>swap</code>).</li> </ul> </li> <li>\u0412\u0441\u0435\u0433\u043e <code>n</code> \u0443\u0437\u043b\u043e\u0432 = <code>O(n)</code> \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Invert%20Binary%20Tree/#space-complexity-oh","title":"\ud83e\udde0 Space complexity: <code>O(h)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 <code>h</code>, \u0433\u0434\u0435:<ul> <li><code>h = log n</code> \u0434\u043b\u044f \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430,</li> <li><code>h = n</code> \u0434\u043b\u044f \u0434\u0435\u0433\u0440\u0430\u0434\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0435\u0440\u0435\u0432\u0430.</li> </ul> </li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code></p> <p>easy tree depth-first-search breadth-first-search binary-tree</p>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/","title":"Linked List Cycle","text":"","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for singly-linked list.  \n# class ListNode:  \n#     def __init__(self, x):  \n#         self.val = x  \n#         self.next = None  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def hasCycle(self, head: Optional[ListNode]) -&gt; bool:  \n        fast = head  \n        slow = head  \n\n        while fast and fast.next:  \n            fast = fast.next.next  \n            slow = slow.next  \n\n            if fast == slow:  \n                return True  \n\n        return False\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given\u00a0<code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p> <p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0<code>next</code>\u00a0pointer. Internally,\u00a0<code>pos</code>\u00a0is used to denote the index of the node that\u00a0tail's\u00a0<code>next</code>\u00a0pointer is connected to.\u00a0Note that\u00a0<code>pos</code>\u00a0is not passed as a parameter.</p> <p>Return\u00a0<code>true</code> if there is a cycle in the linked list. Otherwise, return\u00a0<code>false</code>.</p>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)   <p>Input: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 1<sup>st</sup> node (0-indexed).</p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)   <p>Input: head = [1,2], pos = 0 Output: true Explanation: There is a cycle in the linked list, where the tail connects to the 0<sup>th</sup> node.</p> <p>Example 3:</p>    ![https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)   <p>Input: head = [1], pos = -1 Output: false Explanation: There is no cycle in the linked list.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [3,2,0,-4],\n        \"pos\": 1\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"head\": [1,2],\n        \"pos\": 0\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"head\": [1],\n        \"pos\": -1\n      },\n      \"output\": false\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of the nodes in the list is in the range \\([0, 10^4]\\).</li> <li>\\(-10^5 \\leq Node.val \\leq 10^5\\)</li> <li><code>pos</code>\u00a0is\u00a0<code>-1</code>\u00a0or a\u00a0valid index\u00a0in the linked-list.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0431\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f (<code>slow</code>, <code>fast</code>) \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u0432\u0441\u0435\u043c <code>n</code> \u0443\u0437\u043b\u0430\u043c.</li> <li>\u041d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0445 \u043e\u0431\u0445\u043e\u0434\u043e\u0432 \u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0446\u0438\u043a\u043b\u043e\u0432.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Linked%20List%20Cycle/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043f\u0438\u0441\u043a\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy hash-table linked-list two-pointers</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/","title":"Longest Palindrome","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from collections import Counter  \n\n\nclass Solution:  \n    def longestPalindrome(self, s: str) -&gt; int:  \n        values = Counter(s).values()  \n        result = 0  \n        has_odd = False  \n\n        for value in values:  \n            if value % 2 == 0:  \n                result += value  \n            else:  \n                result += value - 1  \n                has_odd = True  \n\n        if has_odd:  \n            return result + 1  \n\n        return result\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a string\u00a0<code>s</code>\u00a0which consists of lowercase or uppercase letters, return the length of the\u00a0longest\u00a0palindrome\u00a0that can be built with those letters.</p> <p>Letters are\u00a0case sensitive, for example,\u00a0<code>\"Aa\"</code>\u00a0is not considered a palindrome.</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: s = \"abccccdd\" Output: 7 Explanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.</p> <p>Example 2:</p> <p>Input: s = \"a\" Output: 1 Explanation: The longest palindrome that can be built is \"a\", whose length is 1.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abccccdd\"\n      },\n      \"output\": 7\n    },\n    {\n      \"input\": {\n        \"s\": \"a\"\n      },\n      \"output\": 1\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq s.length \\leq 2000\\)</li> <li><code>s</code>\u00a0consists of lowercase\u00a0and/or\u00a0uppercase English\u00a0letters only.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li><code>Counter(s)</code> \u2014 \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435 <code>s</code> \u0434\u043b\u0438\u043d\u044b <code>n</code>.</li> <li>\u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0430 \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043e\u0431\u044b\u0447\u043d\u043e \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 <code>n</code>.</li> <li>\u0418\u0442\u043e\u0433: \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f <code>O(n)</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Palindrome/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li><code>Counter</code> \u0445\u0440\u0430\u043d\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> <li>\u041f\u0440\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u0430) \u2014 \u043f\u0430\u043c\u044f\u0442\u044c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u0430.</li> <li>\u0418\u043d\u0430\u0447\u0435 \u2014 <code>O(k)</code>, \u0433\u0434\u0435 <code>k</code> \u2014 \u0447\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code> \u043f\u0440\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435</p> <p>easy hash-table string greedy</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/","title":"Longest Subarray of 1's After Deleting One Element","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def longestSubarray(self, nums: List[int]) -&gt; int:  \n        left = 0  \n        max_len = 0  \n        zero_count = 0  \n\n        for right in range(len(nums)):  \n            if nums[right] == 0:  \n                zero_count += 1  \n\n            while zero_count &gt; 1:  \n                if nums[left] == 0:  \n                    zero_count -= 1  \n                left += 1  \n\n            max_len = max(max_len, right - left)  \n\n        return max_len\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a binary array\u00a0<code>nums</code>, you should delete one element from it.</p> <p>Return\u00a0the size of the longest non-empty subarray containing only <code>1</code>'s in the resulting array. Return\u00a0<code>0</code>\u00a0if there is no such subarray.</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [1,1,0,1] Output: 3 Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.  </p> <p>Example 2:</p> <p>Input: nums = [0,1,1,1,0,1,1,0,1] Output: 5 Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].  </p> <p>Example 3:</p> <p>Input: nums = [1,1,1] Output: 2 Explanation: You must delete one element.  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [1,1,0,1]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"nums\": [0,1,1,1,0,1,1,0,1]\n      },\n      \"output\": 5\n    },\n    {\n      \"input\": {\n        \"nums\": [1,1,1]\n      },\n      \"output\": 2\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq nums.length \\leq 10^5\\)</li> <li><code>nums[i]</code>\u00a0is either\u00a0<code>0</code>\u00a0or\u00a0<code>1</code>.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u043c <code>right</code>.</li> <li>\u0423\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c <code>left</code> \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0432\u043f\u0435\u0440\u0451\u0434 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435 \u0440\u0430\u0437, \u0441\u043a\u043e\u043b\u044c\u043a\u043e <code>right</code>.</li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u2014 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0435 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Subarray%20of%201%27s%20After%20Deleting%20One%20Element/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u043e\u0432 \u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439.</li> <li>\u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>medium array dynamic-programming sliding-window</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/","title":"Longest Substring Without Repeating Characters","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def lengthOfLongestSubstring(self, s: str) -&gt; int:  \n        last_index = {}  \n        left = max_length = 0  \n\n        for right, char in enumerate(s):  \n            if char in last_index and last_index[char] &gt;= left:  \n                left = last_index[char] + 1  \n\n            last_index[char] = right  \n            max_length = max(max_length, right - left + 1)  \n\n        return max_length\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a string\u00a0<code>s</code>, find the length of the\u00a0longest substring\u00a0without duplicate characters.</p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: s = \"abcabcbb\" Output: 3 Explanation: The answer is \"abc\", with the length of 3.</p> <p>Example 2:</p> <p>Input: s = \"bbbbb\" Output: 1 Explanation: The answer is \"b\", with the length of 1.</p> <p>Example 3:</p> <p>Input: s = \"pwwkew\" Output: 3 Explanation: The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"abcabcbb\"\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"s\": \"bbbbb\"\n      },\n      \"output\": 1\n    },\n    {\n      \"input\": {\n        \"s\": \"pwwkew\"\n      },\n      \"output\": 3\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(0 \\leq s.length \\leq 5 * 10^4\\)</li> <li><code>s</code>\u00a0consists of English letters, digits, symbols and spaces.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <code>right</code> \u0434\u0432\u0438\u0436\u0435\u0442\u0441\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u2014 \u0432\u0441\u0435\u0433\u043e <code>n</code> \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439.</li> <li><code>left</code> \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043f\u0435\u0440\u0451\u0434 \u0438 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0430\u0434.     \u0414\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f, \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0437\u0430 \u043e\u0434\u0438\u043d \u0448\u0430\u0433 (\u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432 <code>last_index</code>).</li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u0445\u044d\u0448-\u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 <code>last_index</code> \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0437\u0430 \u0430\u043c\u043e\u0440\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 <code>O(1)</code> (\u0432\u0441\u0442\u0430\u0432\u043a\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043b\u044e\u0447\u0443).</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Longest%20Substring%20Without%20Repeating%20Characters/#space-complexity-ok","title":"\ud83e\udde0 Space complexity: <code>O(k)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0445\u044d\u0448-\u0442\u0430\u0431\u043b\u0438\u0446\u0430 <code>last_index</code> \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430.</li> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0445\u0440\u0430\u043d\u0438\u0442 <code>k = n</code> \u0437\u0430\u043f\u0438\u0441\u0435\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(min(n, a))</code>, \u0433\u0434\u0435: - <code>n</code> \u2014 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, - <code>a</code> \u2014 \u0440\u0430\u0437\u043c\u0435\u0440 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430 (\u043e\u0431\u044b\u0447\u043d\u043e <code>128</code> \u0434\u043b\u044f ASCII, <code>256</code> \u0434\u043b\u044f extended ASCII \u0438\u043b\u0438 \u0434\u043e \\(2^{21}\\) \u0434\u043b\u044f Unicode).</p> <p>medium hash-table string sliding-window</p>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/","title":"Lowest Common Ancestor of a Binary Search Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, x):  \n#         self.val = x  \n#         self.left = None  \n#         self.right = None  \n\n\nclass Solution:  \n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -&gt; 'TreeNode':  \n        small = min(p.val, q.val)  \n        large = max(p.val, q.val)  \n\n        while root:  \n            if root.val &gt; large:  \n                root = root.left  \n            elif root.val &lt; small:  \n                root = root.right  \n            else:  \n                return root  \n        return None\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.</p> <p>According to the\u00a0definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes\u00a0<code>p</code>\u00a0and\u00a0<code>q</code>\u00a0as the lowest node in\u00a0<code>T</code>\u00a0that has both\u00a0<code>p</code>\u00a0and\u00a0<code>q</code>\u00a0as descendants (where we allow\u00a0a node to be a descendant of itself).\u201d</p>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)   <p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6.  </p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)   <p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.  </p> <p>Example 3:</p> <p>Input: root = [2,1], p = 2, q = 1 Output: 2  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [6,2,8,0,4,7,9,null,null,3,5],\n        \"p\": 2,\n        \"q\": 8\n      },\n      \"output\": 6\n    },\n    {\n      \"input\": {\n        \"root\": [6,2,8,0,4,7,9,null,null,3,5],\n        \"p\": 2,\n        \"q\": 4\n      },\n      \"output\": 2\n    },\n    {\n      \"input\": {\n        \"root\": [2,1],\n        \"p\": 2,\n        \"q\": 1\n      },\n      \"output\": 2\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0\\([2, 10^5]\\).</li> <li>\\(-10^9 \\leq Node.val \\leq 10^9\\)</li> <li>All\u00a0<code>Node.val</code>\u00a0are\u00a0unique.</li> <li><code>p != q</code></li> <li><code>p</code>\u00a0and\u00a0<code>q</code>\u00a0will exist in the BST.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#time-complexity-oh","title":"\u23f1 Time complexity: <code>O(h)</code>","text":"<ul> <li>\u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043b\u0438\u0431\u043e \u0432\u043b\u0435\u0432\u043e, \u043b\u0438\u0431\u043e \u0432\u043f\u0440\u0430\u0432\u043e \u2014 \u043a\u0430\u043a \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u043f\u043e\u0438\u0441\u043a\u0435 \u0432 BST.</li> <li>\u042d\u0442\u043e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f BST (\u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u043f\u043e\u0438\u0441\u043a\u0430).</li> <li><code>h</code> \u2014 \u0432\u044b\u0441\u043e\u0442\u0430 \u0434\u0435\u0440\u0435\u0432\u0430:<ul> <li>\u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c <code>O(log n)</code> (\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e),</li> <li>\u0432 \u0445\u0443\u0434\u0448\u0435\u043c <code>O(n)</code> (\u0432\u044b\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u2014 \u0441\u043f\u0438\u0441\u043e\u043a).</li> </ul> </li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c <code>root</code>, \u043c\u0435\u043d\u044f\u044e\u0449\u0438\u0439\u0441\u044f \u043d\u0430 \u043c\u0435\u0441\u0442\u0435.</li> <li>\u041d\u0435\u0442 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438, \u043d\u0435\u0442 \u0441\u0442\u0435\u043a\u0430, \u043d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>medium tree depth-first-search binary-search-tree binary-tree</p>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/","title":"Majority Element","text":"","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def majorityElement(self, nums: List[int]) -&gt; int:  \n        count = 0  \n        candidate = None  \n\n        for num in nums:  \n            if count == 0:  \n                candidate = num  \n            if num == candidate:  \n                count += 1  \n            else:  \n                count -= 1\n\n        return candidate\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an array\u00a0<code>nums</code>\u00a0of size\u00a0<code>n</code>, return\u00a0the majority element.</p> <p>The majority element is the element that appears more than\u00a0<code>\u230an / 2\u230b</code>\u00a0times. You may assume that the majority element always exists in the array.</p>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [3,2,3] Output: 3  </p> <p>Example 2:</p> <p>Input: nums = [2,2,1,1,1,2,2] Output: 2  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [3,2,3]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"nums\": [2,2,1,1,1,2,2]\n      },\n      \"output\": 2\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li><code>n == nums.length</code></li> <li>\\(1 \\leq n \\leq 5 * 10^4\\)</li> <li>\\(-10^9 \\leq nums[i] \\leq 10^9\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0411\u043e\u0439\u0435\u0440\u0430\u2013\u041c\u0443\u0440\u0430 (Boyer\u2013Moore Voting Algorithm).</li> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 <code>nums</code>, \u0431\u0435\u0437 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0446\u0438\u043a\u043b\u043e\u0432 \u0438\u043b\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Majority%20Element/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438, \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0422\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: <code>candidate</code> \u0438 <code>count</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy array hash-table divide-and-conquer sorting counting</p>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/","title":"Max Consecutive Ones","text":"","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def findMaxConsecutiveOnes(self, nums: List[int]) -&gt; int:  \n        max_count = 0  \n        count = 0  \n\n        for num in nums:  \n            if num == 1:  \n                count += 1  \n                max_count = max(max_count, count)  \n            else:  \n                count = 0  \n\n        return max_count\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a binary array\u00a0<code>nums</code>, return\u00a0the maximum number of consecutive <code>1</code>'s in the array.</p>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [1,1,0,1,1,1] Output: 3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.  </p> <p>Example 2:</p> <p>Input: nums = [1,0,1,1,0,1] Output: 2  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [1,1,0,1,1,1]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"nums\": [1,0,1,1,0,1]\n      },\n      \"output\": 2\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq nums.length \\leq 10^5\\)</li> <li><code>nums[i]</code>\u00a0is either\u00a0<code>0</code>\u00a0or\u00a0<code>1</code>.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u2014 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Max%20Consecutive%20Ones/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435-\u0441\u0447\u0451\u0442\u0447\u0438\u043a\u0430 (<code>count</code> \u0438 <code>max_count</code>).</li> <li>\u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440 \u0434\u0430\u043d\u043d\u044b\u0445.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy array</p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/","title":"Maximum Depth of Binary Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, val=0, left=None, right=None):  \n#         self.val = val  \n#         self.left = left  \n#         self.right = right  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def maxDepth(self, root: Optional[TreeNode]) -&gt; int:  \n        if not root:  \n            return 0  \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>root</code>\u00a0of a binary tree, return\u00a0its maximum depth.</p> <p>A binary tree's\u00a0maximum depth\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg](https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg)   <p>Input: root = [3,9,20,null,null,15,7] Output: 3  </p> <p>Example 2:</p> <p>Input: root = [1,null,2] Output: 2  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [3,9,20,null,null,15,7]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"root\": [1,null,2]\n      },\n      \"output\": 2\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0<code>[0, 104]</code>.</li> <li>\\(-100 \\leq Node.val \\leq 100\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041d\u0443\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438 \u0432\u0441\u0435 <code>n</code> \u0443\u0437\u043b\u043e\u0432 (\u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437).</li> <li>\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f <code>maxDepth</code> \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0435\u0432\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Depth%20of%20Binary%20Tree/#space-complexity-oh","title":"\ud83e\udde0 Space complexity: <code>O(h)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438, \u0433\u043b\u0443\u0431\u0438\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0430\u0432\u043d\u0430 <code>h</code> \u2014 \u0432\u044b\u0441\u043e\u0442\u0435 \u0434\u0435\u0440\u0435\u0432\u0430.</li> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0432\u044b\u0442\u044f\u043d\u0443\u0442\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e) <code>h = n</code>, \u0432 \u043b\u0443\u0447\u0448\u0435\u043c (\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435) <code>h = log n</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code>, \u0433\u0434\u0435 <code>h \u2264 n</code></p> <p>easy tree depth-first-search breadth-first-search binary-tree</p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/","title":"Maximum Subarray","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def maxSubArray(self, nums: List[int]) -&gt; int:  \n        max_sub = cur_sub = nums[0]  \n\n        for num in nums[1:]:  \n            cur_sub = max(num, cur_sub + num)  \n            max_sub = max(max_sub, cur_sub)  \n\n        return max_sub\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an integer array\u00a0<code>nums</code>, find the\u00a0subarray\u00a0with the largest sum, and return\u00a0its sum.</p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6.  </p> <p>Example 2:</p> <p>Input: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1.  </p> <p>Example 3:</p> <p>Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [-2,1,-3,4,-1,2,1,-5,4]\n      },\n      \"output\": 6\n    },\n    {\n      \"input\": {\n        \"nums\": [1]\n      },\n      \"output\": 1\n    },\n    {\n      \"input\": {\n        \"nums\": [5,4,-1,7,8]\n      },\n      \"output\": 23\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq nums.length \\leq 10^5\\)</li> <li>\\(-10^4 \\leq nums[i] \\leq 10^4\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041a\u0430\u0434\u0430\u043d\u0435 (Kadane\u2019s Algorithm).</li> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.  </li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (<code>max</code>, \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u0435).</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Maximum%20Subarray/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435: <code>cur_sub</code> \u0438 <code>max_sub</code>.  </li> <li>\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c, \u0441\u0442\u0435\u043a \u0438\u043b\u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>medium array divide-and-conquer dynamic-programming</p>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/","title":"Merge Two Sorted Lists","text":"","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for singly-linked list.  \n# class ListNode:  \n#     def __init__(self, val=0, next=None):  \n#         self.val = val  \n#         self.next = next  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:  \n        dummy = ListNode()  \n        current = dummy  \n\n        while list1 and list2:  \n            if list1.val &lt;= list2.val:  \n                current.next = list1  \n                list1 = list1.next  \n            else:  \n                current.next = list2  \n                list2 = list2.next  \n            current = current.next  \n\n        current.next = list1 if list1 else list2  \n\n        return dummy.next\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>You are given the heads of two sorted linked lists\u00a0<code>list1</code>\u00a0and\u00a0<code>list2</code>.</p> <p>Merge the two lists into one\u00a0sorted\u00a0list. The list should be made by splicing together the nodes of the first two lists.</p> <p>Return\u00a0the head of the merged linked list.</p>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)   <p>Input: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4]  </p> <p>Example 2:</p> <p>Input: list1 = [], list2 = [] Output: []  </p> <p>Example 3:</p> <p>Input: list1 = [], list2 = [0] Output: [0]  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"list1\": [1,2,4],\n        \"list2\": [1,3,4]\n      },\n      \"output\": [1,1,2,3,4,4]\n    },\n    {\n      \"input\": {\n        \"list1\": [],\n        \"list2\": []\n      },\n      \"output\": []\n    },\n    {\n      \"input\": {\n        \"list1\": [],\n        \"list2\": [0]\n      },\n      \"output\": [0]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in both lists is in the range\u00a0<code>[0, 50]</code>.</li> <li>\\(-100 \\leq Node.val \\leq 100\\)</li> <li>Both\u00a0<code>list1</code>\u00a0and\u00a0<code>list2</code>\u00a0are sorted in\u00a0non-decreasing\u00a0order.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#time-complexity-onm","title":"\u23f1 Time complexity: <code>O(n+m)</code>","text":"<ul> <li>\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e \u0432\u0441\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u043e\u0431\u043e\u0438\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u043d\u0438\u0435 \u0443\u0437\u043b\u043e\u0432 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435.</li> <li>\u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u0441\u0443\u043c\u043c\u0435 \u0434\u043b\u0438\u043d \u0441\u043f\u0438\u0441\u043a\u043e\u0432.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n+m)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Merge%20Two%20Sorted%20Lists/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0414\u0440\u0443\u0433\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, - \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u0442\u0435\u043a \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 \u0434\u043e <code>m+n</code>, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c \u2014 <code>O(n+m)</code>.</li> <li>\u0418\u0442\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u044c\u044e (\u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438), \u0442\u043e \u0435\u0441\u0442\u044c <code>O(1)</code>.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy linked-list recursion</p>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/","title":"Middle of the Linked List","text":"","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for singly-linked list.  \n# class ListNode:  \n#     def __init__(self, val=0, next=None):  \n#         self.val = val  \n#         self.next = next  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:  \n        slow_pointer = head  \n        fast_pointer = head  \n\n        while fast_pointer is not None and fast_pointer.next is not None:  \n            slow_pointer = slow_pointer.next  \n            fast_pointer = fast_pointer.next.next  \n\n        return slow_pointer\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>head</code>\u00a0of a singly linked list, return\u00a0the middle node of the linked list.</p> <p>If there are two middle nodes, return\u00a0the second middle\u00a0node.</p>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg)   <p>Input: head = [1,2,3,4,5] Output: [3,4,5] Explanation: The middle node of the list is node 3.  </p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg](https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg)   <p>Input: head = [1,2,3,4,5,6] Output: [4,5,6] Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [1,2,3,4,5]\n      },\n      \"output\": [3,4,5]\n    },\n    {\n      \"input\": {\n        \"head\": [1,2,3,4,5,6]\n      },\n      \"output\": [4,5,6]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the list is in the range\u00a0<code>[1, 100]</code>.</li> <li>\\(1 \\leq Node.val \\leq 100\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u0434\u0432\u0443\u043c\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f\u043c\u0438.</li> <li><code>fast_pointer</code> \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u0442 \u043f\u043e <code>n</code> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u0441 \u0448\u0430\u0433\u043e\u043c 2, <code>slow_pointer</code> \u2014 \u0441 \u0448\u0430\u0433\u043e\u043c 1.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Middle%20of%20the%20Linked%20List/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0432\u0430 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f (<code>slow_pointer</code>, <code>fast_pointer</code>), \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0441\u043f\u0438\u0441\u043a\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy linked-list two-pointers</p>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/","title":"Number of Islands","text":"","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List  \n\n\nclass Solution:  \n    def numIslands(self, grid: List[List[str]]) -&gt; int:  \n        if not grid:  \n            return 0  \n\n        rows, cols = len(grid), len(grid[0])  \n        count = 0  \n\n        def dfs(r, c):  \n            if r &lt; 0 or c &lt; 0 or r &gt;= rows or c &gt;= cols or grid[r][c] != '1':  \n                return  \n            grid[r][c] = '0'  \n            dfs(r + 1, c)  \n            dfs(r - 1, c)  \n            dfs(r, c + 1)  \n            dfs(r, c - 1)  \n\n        for m in range(rows):  \n            for n in range(cols):  \n                if grid[m][n] == '1':  \n                    dfs(m, n)  \n                    count += 1  \n\n        return count\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an\u00a0<code>m x n</code>\u00a02D binary grid\u00a0<code>grid</code>\u00a0which represents a map of\u00a0<code>'1'</code>s (land) and\u00a0<code>'0'</code>s (water), return\u00a0the number of islands.</p> <p>An\u00a0island\u00a0is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: grid = [   [\"1\",\"1\",\"1\",\"1\",\"0\"],   [\"1\",\"1\",\"0\",\"1\",\"0\"],   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"0\",\"0\",\"0\",\"0\",\"0\"] ] Output: 1  </p> <p>Example 2:</p> <p>Input: grid = [   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"1\",\"1\",\"0\",\"0\",\"0\"],   [\"0\",\"0\",\"1\",\"0\",\"0\"],   [\"0\",\"0\",\"0\",\"1\",\"1\"] ] Output: 3  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"grid\": [\n          [\"1\",\"1\",\"1\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"1\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"0\",\"0\"]\n        ]\n      },\n      \"output\": 1\n    },\n    {\n      \"input\": {\n        \"grid\": [\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"1\",\"1\",\"0\",\"0\",\"0\"],\n          [\"0\",\"0\",\"1\",\"0\",\"0\"],\n          [\"0\",\"0\",\"0\",\"1\",\"1\"]\n        ]\n      },\n      \"output\": 3\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li><code>m == grid.length</code></li> <li><code>n == grid[i].length</code></li> <li>\\(1 \\leq m, n \\leq 300\\)</li> <li><code>grid[i][j]</code>\u00a0is\u00a0<code>'0'</code>\u00a0or\u00a0<code>'1'</code>.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#time-complexity-onm","title":"\u23f1 Time complexity: <code>O(n*m)</code>","text":"<ul> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n*m)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Number%20of%20Islands/#space-complexity-onm","title":"\ud83e\udde0 Space complexity: <code>O(n*m)</code>","text":"<ul> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0432\u0441\u0451 \u0437\u0435\u043c\u043b\u044f) \u0441\u0442\u0435\u043a \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 = <code>O(n * m)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n*m)</code></p> <p>medium array depth-first-search breadth-first-search union-find matrix</p>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/","title":"Ransom Note","text":"","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from collections import Counter  \n\n\nclass Solution:  \n    def canConstruct(self, ransomNote: str, magazine: str) -&gt; bool:  \n        r_count = Counter(ransomNote)  \n        m_count = Counter(magazine)  \n\n        for char in r_count:  \n            if r_count[char] &gt; m_count.get(char, 0):  \n                return False  \n        return True\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given two strings\u00a0<code>ransomNote</code>\u00a0and\u00a0<code>magazine</code>, return\u00a0<code>true</code> if <code>ransomNote</code> can be constructed by using the letters from <code>magazine</code> and <code>false</code> otherwise.</p> <p>Each letter in\u00a0<code>magazine</code>\u00a0can only be used once in\u00a0<code>ransomNote</code>.</p>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: ransomNote = \"a\", magazine = \"b\" Output: false  </p> <p>Example 2:</p> <p>Input: ransomNote = \"aa\", magazine = \"ab\" Output: false  </p> <p>Example 3:</p> <p>Input: ransomNote = \"aa\", magazine = \"aab\" Output: true  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"ransomNote\": \"a\",\n        \"magazine\": \"b\"\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"ransomNote\": \"aa\",\n        \"magazine\": \"ab\"\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"ransomNote\": \"aa\",\n        \"magazine\": \"aab\"\n      },\n      \"output\": true\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq ransomNote.length, magazine.length \\leq 10^5\\)</li> <li><code>ransomNote</code>\u00a0and\u00a0<code>magazine</code>\u00a0consist of lowercase English letters.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#time-complexity-onm","title":"\u23f1 Time complexity: <code>O(n+m)</code>","text":"<ul> <li><code>Counter(ransomNote)</code> \u2014 <code>O(n)</code>, \u0433\u0434\u0435 <code>n = len(ransomNote)</code></li> <li><code>Counter(magazine)</code> \u2014 <code>O(m)</code>, \u0433\u0434\u0435 <code>m = len(magazine)</code></li> <li>\u041f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e <code>r_count</code> \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c <code>O(k)</code>, \u0433\u0434\u0435 <code>k</code> \u2014 \u0447\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 <code>ransomNote</code> (\u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 <code>k = 26</code> \u0434\u043b\u044f \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u044b)</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n + m)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Ransom%20Note/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li><code>Counter</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u0430\u043c\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> <li>\u0414\u043b\u044f \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 26 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u2192 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f <code>O(1)</code></li> <li>\u0415\u0441\u043b\u0438 \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c Unicode/\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0430\u043b\u0444\u0430\u0432\u0438\u0442 \u2192 <code>O(k)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code> \u043f\u0440\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435, \u0438\u043d\u0430\u0447\u0435 <code>O(k)</code></p> <p>easy hash-table string counting</p>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/","title":"Reverse Linked List","text":"","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for singly-linked list.  \n# class ListNode:  \n#     def __init__(self, val=0, next=None):  \n#         self.val = val  \n#         self.next = next  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def reverseList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:  \n        node = None  \n        prev = head  \n\n        while prev:  \n            next_node = prev.next  \n            prev.next = node  \n            node = prev  \n            prev = next_node  \n\n        return node\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>head</code>\u00a0of a singly linked list, reverse the list, and return\u00a0the reversed list.</p>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)   <p>Input: head = [1,2,3,4,5] Output: [5,4,3,2,1]  </p> <p>Example 2:</p>    ![https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg](https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg)   <p>Input: head = [1,2] Output: [2,1]  </p> <p>Example 3:</p> <p>Input: head = [] Output: []  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"head\": [1,2,3,4,5]\n      },\n      \"output\": [5,4,3,2,1]\n    },\n    {\n      \"input\": {\n        \"head\": [1,2]\n      },\n      \"output\": [2,1]\n    },\n    {\n      \"input\": {\n        \"head\": []\n      },\n      \"output\": []\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the list is the range\u00a0<code>[0, 5000]</code>.</li> <li>\\(-5000 \\leq Node.val \\leq 5000\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0443\u0437\u043b\u0443 \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Reverse%20Linked%20List/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0440\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044f: <code>node</code>, <code>prev</code>, <code>next_node</code>.</li> <li>\u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0435\u043a \u0438\u043b\u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy linked-list recursion</p>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/","title":"Two Sum","text":"","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>from typing import List\n\n\nclass Solution:  \n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:  \n        pair = {}  \n\n        for i, num in enumerate(nums):  \n            if target - num in pair:  \n                return[i, pair[target - num]]  \n            pair[num] = i  \n        return []\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].  </p> <p>Example 2:</p> <p>Input: nums = [3,2,4], target = 6 Output: [1,2]  </p> <p>Example 3:</p> <p>Input: nums = [3,3], target = 6 Output: [0,1]  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"nums\": [2,7,11,15],\n        \"target\": 9\n      },\n      \"output\": [0,1]\n    },\n    {\n      \"input\": {\n        \"nums\": [3,2,4],\n        \"target\": 6\n      },\n      \"output\": [1,2]\n    },\n    {\n      \"input\": {\n        \"nums\": [3,3],\n        \"target\": 6\n      },\n      \"output\": [0,1]\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(2 \\leq nums.length \\leq 10^4\\)</li> <li>\\(-10^9 \\leq nums[i] \\leq 10^9\\)</li> <li>\\(-10^9 \\leq target \\leq 10^9\\)</li> <li>Only one valid answer exists.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 <code>nums</code> (\u0434\u043b\u0438\u043d\u0430 <code>n</code>)</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0451\u043c (\u043f\u043e\u0438\u0441\u043a <code>in</code>, \u0432\u0441\u0442\u0430\u0432\u043a\u0430) \u2014 <code>O(1)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Two%20Sum/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 <code>pair</code> \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432\u0441\u0435 <code>n</code> \u0447\u0438\u0441\u0435\u043b (\u0435\u0441\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0438\u043b\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442)</li> <li>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043c\u044f\u0442\u044c \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 <code>nums</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>easy array hash-table</p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/","title":"Valid Anagram","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def isAnagram(self, s: str, t: str) -&gt; bool:  \n        if len(s) != len(t):  \n            return False  \n\n        counts = [0] * 26  \n        for c1, c2 in zip(s, t):  \n            counts[ord(c1) - ord('a')] += 1  \n            counts[ord(c2) - ord('a')] -= 1  \n\n        return all(c == 0 for c in counts)\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given two strings\u00a0<code>s</code>\u00a0and\u00a0<code>t</code>, return\u00a0<code>true</code>\u00a0if\u00a0<code>t</code>\u00a0is an\u00a0anagram\u00a0of\u00a0<code>s</code>, and\u00a0<code>false</code>\u00a0otherwise.</p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input:\u00a0s = \"anagram\", t = \"nagaram\" Output:\u00a0true  </p> <p>Example 2:</p> <p>Input:\u00a0s = \"rat\", t = \"car\" Output:\u00a0false  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"anagram\",\n        \"t\": \"nagaram\"\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"s\": \"rat\",\n        \"t\": \"car\"\n      },\n      \"output\": false\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq s.length, t.length \\leq 5 * 10^4\\)</li> <li><code>s</code>\u00a0and\u00a0<code>t</code>\u00a0consist of lowercase English letters.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u043b\u0438\u043d\u044b <code>n</code>, \u0433\u0434\u0435 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> <li>\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u0441\u0447\u0451\u0442\u0447\u0438\u043a\u043e\u0432 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 <code>O(n)</code> \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Anagram/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f <code>Counter</code> \u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, <code>counts[26]</code> \u0434\u043b\u044f \u043b\u0430\u0442\u0438\u043d\u0438\u0446\u044b).</li> <li>\u041f\u0430\u043c\u044f\u0442\u044c \u043d\u0435 \u0440\u0430\u0441\u0442\u0451\u0442 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438, \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code> (\u043f\u0440\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0435), \u0438\u043d\u0430\u0447\u0435 <code>O(k)</code>, \u0433\u0434\u0435 <code>k</code> \u2014 \u0447\u0438\u0441\u043b\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.</p> <p>easy hash-table string sorting</p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/","title":"Valid Palindrome","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def isPalindrome(self, s: str) -&gt; bool:  \n        left = 0  \n        right = len(s) - 1  \n\n        while left &lt; right:  \n            while left &lt; right and not s[left].isalnum():  \n                left += 1  \n            while left &lt; right and not s[right].isalnum():  \n                right -= 1  \n            if s[left].lower() != s[right].lower():  \n                return False  \n            left += 1  \n            right -= 1  \n\n        return True\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>A phrase is a\u00a0palindrome\u00a0if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p> <p>Given a string\u00a0<code>s</code>, return\u00a0<code>true</code> if it is a\u00a0palindrome, or <code>false</code> otherwise.</p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input: s = \"A man, a plan, a canal: Panama\" Output: true Explanation: \"amanaplanacanalpanama\" is a palindrome.  </p> <p>Example 2:</p> <p>Input: s = \"race a car\" Output: false Explanation: \"raceacar\" is not a palindrome.  </p> <p>Example 3:</p> <p>Input: s = \" \" Output: true Explanation: s is an empty string \"\" after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome.</p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"A man, a plan, a canal: Panama\"\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"s\": \"race a car\"\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"s\": \" \"\n      },\n      \"output\": true\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq s.length \\leq 2 * 10^5\\)</li> <li><code>s</code>\u00a0consists only of printable ASCII characters.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u0423\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 <code>left</code> \u0438 <code>right</code> \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043a\u0430\u0436\u0434\u044b\u0439.</li> <li>\u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u0446\u0438\u043a\u043b\u044b \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b, \u043d\u0435 \u0434\u0432\u0438\u0433\u0430\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043d\u0430\u0437\u0430\u0434.</li> <li>\u0421\u0443\u043c\u043c\u0430\u0440\u043d\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Palindrome/#space-complexity-o1","title":"\ud83e\udde0 Space complexity: <code>O(1)</code>","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445-\u0441\u0447\u0451\u0442\u0447\u0438\u043a\u043e\u0432 (<code>left</code>, <code>right</code>).</li> <li>\u041d\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438, \u0437\u0430\u0432\u0438\u0441\u044f\u0449\u0435\u0439 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0445\u043e\u0434\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(1)</code></p> <p>easy two-pointers string</p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/","title":"Valid Parentheses","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code>class Solution:  \n    def isValid(self, s: str) -&gt; bool:  \n        storage = []  \n        valid = {  \n            \")\": \"(\",  \n            \"]\": \"[\",  \n            \"}\": \"{\",  \n        }  \n\n        for char in s:  \n            if char in valid.values():  \n                storage.append(char)  \n            elif char in valid.keys():  \n                if not storage or valid[char] != storage.pop():  \n                    return False  \n\n        return not storage\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given a string\u00a0<code>s</code>\u00a0containing just the characters\u00a0<code>'('</code>,\u00a0<code>')'</code>,\u00a0<code>'{'</code>,\u00a0<code>'}'</code>,\u00a0<code>'['</code>\u00a0and\u00a0<code>']'</code>, determine if the input string is valid.</p> <p>An input string is valid if:</p> <ol> <li>Open brackets must be closed by the same type of brackets.</li> <li>Open brackets must be closed in the correct order.</li> <li>Every close bracket has a corresponding open bracket of the same type.</li> </ol>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p> <p>Input:\u00a0s = \"()\" Output:\u00a0true  </p> <p>Example 2:</p> <p>Input:\u00a0s = \"()[]{}\" Output:\u00a0true  </p> <p>Example 3:</p> <p>Input:\u00a0s = \"(]\" Output:\u00a0false  </p> <p>Example 4:</p> <p>Input:\u00a0s = \"([])\" Output:\u00a0true  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"s\": \"()\"\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"s\": \"()[]{}\"\n      },\n      \"output\": true\n    },\n    {\n      \"input\": {\n        \"s\": \"(]\"\n      },\n      \"output\": false\n    },\n    {\n      \"input\": {\n        \"s\": \"([])\"\n      },\n      \"output\": true\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>\\(1 \\leq s.length \\leq 10^4\\)</li> <li><code>s</code>\u00a0consists of parentheses only\u00a0<code>'()[]{}'</code>.</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li><code>n</code> \u2014 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 <code>s</code></li> <li>\u041e\u0434\u0438\u043d \u043f\u0440\u043e\u0445\u043e\u0434 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435: <code>for char in s</code> \u2014 <code>O(n)</code></li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043e \u0441\u0442\u0435\u043a\u043e\u043c (<code>append</code>, <code>pop</code>, <code>not</code>) \u2014 <code>O(1)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Valid%20Parentheses/#space-complexity-on","title":"\ud83e\udde0 Space complexity: <code>O(n)</code>","text":"<ul> <li>\u0412 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u2014 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u0431\u043a\u0438), \u0441\u0442\u0435\u043a <code>storage</code> \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c <code>n</code> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432</li> <li>\u0421\u043b\u043e\u0432\u0430\u0440\u044c <code>valid</code> \u2014 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430 <code>O(1)</code></li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p> <p>easy string stack</p>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/","title":"Validate Binary Search Tree","text":"","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<pre><code># Definition for a binary tree node.  \n# class TreeNode:  \n#     def __init__(self, val=0, left=None, right=None):  \n#         self.val = val  \n#         self.left = left  \n#         self.right = right  \nfrom typing import Optional  \n\n\nclass Solution:  \n    def isValidBST(self, root: Optional[TreeNode]) -&gt; bool:  \n        def validate(node, low, high):  \n            if not node:  \n                return True  \n            if not (low &lt; node.val &lt; high):  \n                return False  \n            return (validate(node.left, low, node.val) and  \n                    validate(node.right, node.val, high))  \n\n        return validate(root, float('-inf'), float('inf'))\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_2","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"<p>Given the\u00a0<code>root</code>\u00a0of a binary tree, return\u00a0the length of the\u00a0diameter\u00a0of the tree.</p> <p>The\u00a0diameter\u00a0of a binary tree is the\u00a0length\u00a0of the longest path between any two nodes in a tree. This path may or may not pass through the\u00a0<code>root</code>.</p> <p>The\u00a0length\u00a0of a path between two nodes is represented by the number of edges between them.</p>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_3","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>Example 1:</p>    ![https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg](https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg)   <p>Input: root = [1,2,3,4,5] Output: 3 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].  </p> <p>Example 2:</p> <p>Input: root = [1,2] Output: 1  </p> <pre><code>{\n  \"examples\": [\n    {\n      \"input\": {\n        \"root\": [1,2,3,4,5]\n      },\n      \"output\": 3\n    },\n    {\n      \"input\": {\n        \"root\": [1,2]\n      },\n      \"output\": 1\n    }\n  ]\n}\n</code></pre>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_5","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"<ul> <li>The number of nodes in the tree is in the range\u00a0\\([1, 10^4]\\).</li> <li>\\(-2^{31} \\leq Node.val \\leq 2^{31} - 1\\)</li> </ul>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#_6","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#time-complexity-on","title":"\u23f1 Time complexity: <code>O(n)</code>","text":"<ul> <li>\u041a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437.</li> <li>\u041d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0448\u0430\u0433\u0435 \u2014 \u043e\u0434\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u0434\u0432\u0430 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0445 \u0432\u044b\u0437\u043e\u0432\u0430.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(n)</code></p>","tags":["problem"]},{"location":"obsidian/problems/Validate%20Binary%20Search%20Tree/#space-complexity-oh","title":"\ud83e\udde0 Space complexity: <code>O(h)</code>","text":"<ul> <li><code>h</code> \u2014 \u0432\u044b\u0441\u043e\u0442\u0430 \u0434\u0435\u0440\u0435\u0432\u0430:<ul> <li><code>O(log n)</code> \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c,</li> <li><code>O(n)</code> \u0432 \u0445\u0443\u0434\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 (\u0432\u044b\u0440\u043e\u0436\u0434\u0435\u043d\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e).</li> </ul> </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u0442\u0435\u043a \u0432\u044b\u0437\u043e\u0432\u043e\u0432 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438.</li> </ul> <p>\u0418\u0442\u043e\u0433: <code>O(h)</code></p> <p>medium tree depth-first-search binary-search-tree binary-tree</p>","tags":["problem"]},{"location":"obsidian/templates/problem/","title":"Problem","text":"<p>&lt;%* // \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f const title = await tp.system.prompt(\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 (\u043a\u0430\u043a \u043d\u0430 LeetCode)\"); const difficulty = await tp.system.suggester([\"\u041b\u0435\u0433\u043a\u0438\u0439\", \"\u0421\u0440\u0435\u0434\u043d\u0438\u0439\", \"\u0421\u043b\u043e\u0436\u043d\u044b\u0439\"], [\"Easy\", \"Medium\", \"Hard\"]); const topicsStr = await tp.system.prompt(\"\u0422\u043e\u043f\u0438\u043a\u0438 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e\"); const time = await tp.system.prompt(\"Time complexity (O)\") || \"&lt;\u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c&gt;\"; const space = await tp.system.prompt(\"Space complexity (O)\") || \"&lt;\u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c&gt;\";</p> <p>// \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a await tp.file.rename(title);</p> <p>// \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u043e\u043f\u0438\u043a\u0438 const topics = topicsStr?.split(\",\").map(t =&gt; t.trim());</p> <p>// \u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f URL const urlName = title   .toLowerCase()   .replace(/['\u2019]/g, '')               // \u0443\u0431\u0440\u0430\u0442\u044c \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u044b   .replace(/[^a-z0-9]+/g, '-')       // \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u0440\u043e\u043c\u0435 \u0431\u0443\u043a\u0432 \u0438 \u0446\u0438\u0444\u0440 \u043d\u0430 \u0434\u0435\u0444\u0438\u0441   .replace(/^-+|-+$/g, '');          // \u0443\u0431\u0440\u0430\u0442\u044c \u0432\u0435\u0434\u0443\u0449\u0438\u0435 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u0434\u0435\u0444\u0438\u0441\u044b</p> <p>// \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c YAML-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a const yaml = <code>--- title_rus: \"&lt;\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435&gt;\" difficulty: \"${difficulty}\" leetcode_url: \"https://leetcode.com/problems/${urlName}/\" topics: [${topics.map(t =&gt;</code>\"\\({t}\"`).join(\", \")}] time: \"O(\\))\" space: \"O(${space})\" grind75: False tags: [\"problem\"]</p> <p>`;</p> <p>// \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043b\u043e \u0437\u0430\u043c\u0435\u0442\u043a\u0438 \u0441 \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u043c\u0438 \u0432\u0441\u0442\u0430\u0432\u043a\u0430\u043c\u0438 const body = `</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#_1","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435","text":"<p>```python</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#_2","title":"\u041c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043a\u043e\u0434\u0430","text":"<p>```</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#_3","title":"\ud83c\uddfa\ud83c\uddf8 \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["#template"]},{"location":"obsidian/templates/problem/#_4","title":"\ud83c\uddf7\ud83c\uddfa \u0423\u0441\u043b\u043e\u0432\u0438\u0435","text":"","tags":["#template"]},{"location":"obsidian/templates/problem/#_5","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b","text":"<p>```json</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#json","title":"\u041c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JSON","text":"<p>```</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#_6","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f","text":"","tags":["#template"]},{"location":"obsidian/templates/problem/#_7","title":"\u041f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432","text":"","tags":["#template"]},{"location":"obsidian/templates/problem/#time-complexity-otime","title":"\u23f1 Time complexity: `O(${time})`","text":"<p>\u0418\u0442\u043e\u0433: `O(${time})`</p>","tags":["#template"]},{"location":"obsidian/templates/problem/#space-complexity-ospace","title":"\ud83e\udde0 Space complexity: `O(${space})`","text":"<p>\u0418\u0442\u043e\u0433: `O(${space})` `;</p> <p>// \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0442\u0435\u0433\u0438 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0444\u0430\u0439\u043b\u0430 const tags = <code>${\"#\" + difficulty.toLowerCase()} ${topics.map(t =&gt; \"#\" + t.toLowerCase().replace(/\\s+/g, \"-\")).join(\" \")}</code>;</p> <p>tR = yaml + body + tags; %&gt;</p>","tags":["#template"]}]}